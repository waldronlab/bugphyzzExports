 
Traceback: 
 [1] "24: makeRestartList(...)"                                                                                                            
 [2] "23: withRestarts(rlang_muffle = function() NULL, signalCondition(cnd))"                                                              
 [3] "22: cnd_signal(cnd)"                                                                                                                 
 [4] "21: signal(msg, \"lifecycle_stage\", stage = stage, package = what$pkg, "                                                            
 [5] "        function_nm = what$fn, argument = what$arg, reason = what$reason)"                                                           
 [6] "20: signal_stage(\"deprecated\", what)"                                                                                              
 [7] "19: lifecycle::deprecate_soft(\"1.2.0\", what, details = cli::format_inline(\"Please use {.code {str}} instead of `.data${var}`\"), "
 [8] "        user_env = env)"                                                                                                             
 [9] "18: call_kind(expr, context_mask, error_call)"                                                                                       
[10] "17: expr_kind(expr, context_mask, error_call)"                                                                                       
[11] "16: walk_data_tree(new, data_mask, context_mask)"                                                                                    
[12] "15: reduce_sels(node, data_mask, context_mask, init = init)"                                                                         
[13] "14: eval_c(expr, data_mask, context_mask)"                                                                                           
[14] "13: walk_data_tree(expr, data_mask, context_mask)"                                                                                   
[15] "12: vars_select_eval(vars, expr, strict = strict, data = x, name_spec = name_spec, "                                                 
[16] "        uniquely_named = uniquely_named, allow_rename = allow_rename, "                                                              
[17] "        allow_empty = allow_empty, allow_predicates = allow_predicates, "                                                            
[18] "        type = type, error_call = error_call)"                                                                                       
[19] "11: withCallingHandlers(expr, condition = function(cnd) {"                                                                           
[20] "        {"                                                                                                                           
[21] "            .__handler_frame__. <- TRUE"                                                                                             
[22] "            .__setup_frame__. <- frame"                                                                                              
[23] "            if (inherits(cnd, \"message\")) {"                                                                                       
[24] "                except <- c(\"warning\", \"error\")"                                                                                 
[25] "            }"                                                                                                                       
[26] "            else if (inherits(cnd, \"warning\")) {"                                                                                  
[27] "                except <- \"error\""                                                                                                 
[28] "            }"                                                                                                                       
[29] "            else {"                                                                                                                  
[30] "                except <- \"\""                                                                                                      
[31] "            }"                                                                                                                       
[32] "        }"                                                                                                                           
[33] "        while (!is_null(cnd)) {"                                                                                                     
[34] "            if (inherits(cnd, \"vctrs_error_subscript\")) {"                                                                         
[35] "                out <- handlers[[1L]](cnd)"                                                                                          
[36] "                if (!inherits(out, \"rlang_zap\")) "                                                                                 
[37] "                    throw(out)"                                                                                                      
[38] "            }"                                                                                                                       
[39] "            inherit <- .subset2(.subset2(cnd, \"rlang\"), \"inherit\")"                                                              
[40] "            if (is_false(inherit)) {"                                                                                                
[41] "                return()"                                                                                                            
[42] "            }"                                                                                                                       
[43] "            cnd <- .subset2(cnd, \"parent\")"                                                                                        
[44] "        }"                                                                                                                           
[45] "    })"                                                                                                                              
[46] "10: try_fetch(expr, vctrs_error_subscript = function(cnd) {"                                                                         
[47] "        cnd$subscript_action <- subscript_action(type)"                                                                              
[48] "        cnd$subscript_elt <- \"column\""                                                                                             
[49] "        cnd_signal(cnd)"                                                                                                             
[50] "    })"                                                                                                                              
[51] "9: with_subscript_errors(out <- vars_select_eval(vars, expr, strict = strict, "                                                      
[52] "       data = x, name_spec = name_spec, uniquely_named = uniquely_named, "                                                           
[53] "       allow_rename = allow_rename, allow_empty = allow_empty, allow_predicates = allow_predicates, "                                
[54] "       type = type, error_call = error_call), type = type)"                                                                          
[55] "8: eval_select_impl(data, names(data), as_quosure(expr, env), include = include, "                                                   
[56] "       exclude = exclude, strict = strict, name_spec = name_spec, "                                                                  
[57] "       allow_rename = allow_rename, allow_empty = allow_empty, allow_predicates = allow_predicates, "                                
[58] "       error_call = error_call, )"                                                                                                   
[59] "7: tidyselect::eval_select(expr(c(...)), data = .data, error_call = error_call)"                                                     
[60] "6: select.data.frame(dplyr::mutate(df, target_scores = rep(1/n, "                                                                    
[61] "       n), score_diff = .data$Score - .data$target_scores, Score = .data$Score - "                                                   
[62] "       adjF * .data$score_diff, NCBI_ID = node$name, Evidence = \"inh\", "                                                           
[63] "       Taxon_name = node$Taxon_name, Rank = node$Rank, taxid = node$taxid, "                                                         
[64] "       ), -.data$target_scores, -.data$score_diff)"                                                                                  
[65] "5: dplyr::select(dplyr::mutate(df, target_scores = rep(1/n, n), "                                                                    
[66] "       score_diff = .data$Score - .data$target_scores, Score = .data$Score - "                                                       
[67] "           adjF * .data$score_diff, NCBI_ID = node$name, Evidence = \"inh\", "                                                       
[68] "       Taxon_name = node$Taxon_name, Rank = node$Rank, taxid = node$taxid, "                                                         
[69] "       ), -.data$target_scores, -.data$score_diff)"                                                                                  
[70] "4: fun(node, ...)"                                                                                                                   
[71] "3: Do(t, fun, ...)"                                                                                                                  
[72] "2: ncbi_tree$Do(inh1, traversal = \"pre-order\")"                                                                                    
[73] "1: system.time({"                                                                                                                    
[74] "       ncbi_tree$Do(inh1, traversal = \"pre-order\")"                                                                                
[75] "   })"                                                                                                                               
